import { NextRequest, NextResponse } from 'next/server';
import { paymentService } from '@/lib/payment';

export const dynamic = 'force-dynamic';

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const data = formData.get('data') as string;
    const signature = formData.get('signature') as string;

    if (!data || !signature) {
      return NextResponse.json({
        success: false,
        error: 'Missing webhook data'
      }, { status: 400 });
    }

    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º webhook
    const verification = paymentService.verifyWebhook(data, signature);
    
    if (!verification.isValid) {
      console.error('Invalid webhook signature');
      return NextResponse.json({
        success: false,
        error: 'Invalid signature'
      }, { status: 403 });
    }

    const paymentData = verification.paymentData!;
    
    console.log('Payment webhook received:', {
      orderId: paymentData.order_id,
      status: paymentData.status,
      amount: paymentData.amount,
      transactionId: paymentData.transaction_id
    });

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:
    // 1. –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ order_id
    // 2. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    // 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
    // 4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

    // TODO: Integrate with database and order processing system
    const orderProcessingResult = await processPaymentWebhook(paymentData);

    return NextResponse.json({
      success: true,
      orderId: paymentData.order_id,
      status: paymentData.status,
      processed: orderProcessingResult.processed,
      message: orderProcessingResult.message
    });

  } catch (error) {
    console.error('Webhook processing error:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Webhook processing failed',
      message: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ø–ª–∞—Ç–µ–∂–∞
async function processPaymentWebhook(paymentData: any): Promise<{
  processed: boolean;
  message: string;
}> {
  try {
    const { order_id, status, amount, transaction_id } = paymentData;

    // Mock –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ —Å –ë–î
    switch (status) {
      case 'success':
        console.log(`‚úÖ Payment successful for order ${order_id}: ${amount} UAH`);
        // TODO: 
        // - Update order status to 'paid'
        // - Send confirmation email to customer
        // - Trigger production workflow
        // - Update inventory if needed
        // - Generate invoice
        return {
          processed: true,
          message: 'Payment processed successfully'
        };

      case 'failure':
      case 'error':
        console.log(`‚ùå Payment failed for order ${order_id}`);
        // TODO:
        // - Update order status to 'payment_failed'
        // - Send failure notification to customer
        // - Log payment failure for analysis
        return {
          processed: true,
          message: 'Payment failure processed'
        };

      case 'processing':
        console.log(`üîÑ Payment processing for order ${order_id}`);
        // TODO:
        // - Update order status to 'payment_processing'
        // - Send processing notification to customer
        return {
          processed: true,
          message: 'Payment processing status updated'
        };

      default:
        console.log(`üìã Payment status '${status}' for order ${order_id}`);
        return {
          processed: true,
          message: `Status '${status}' processed`
        };
    }

  } catch (error) {
    console.error('Order processing error:', error);
    return {
      processed: false,
      message: 'Order processing failed'
    };
  }
}