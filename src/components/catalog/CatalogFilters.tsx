"use client";

import { Search, Filter, X, CheckCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Slider } from "@/components/ui/slider";

interface CatalogFiltersProps {
  filters: {
    category?: string;
    priceMin?: number;
    priceMax?: number;
    search?: string;
    material?: string;
    size?: string;
    finish?: string;
    urgency?: string;
    printType?: string;
    inStock?: boolean;
    rating?: number;
  };
  onFilterChange: (filters: Partial<CatalogFiltersProps["filters"]>) => void;
}

export function CatalogFilters({ filters, onFilterChange }: CatalogFiltersProps) {
  const categories = [
    { id: 'canvas', name: '–•–æ–ª—Å—Ç', icon: 'üñºÔ∏è' },
    { id: 'acrylic', name: '–ê–∫—Ä–∏–ª', icon: 'üíé' },
    { id: 'business-cards', name: '–í—ñ–∑–∏—Ç–∫–∏', icon: 'üíº' },
    { id: 'brochures', name: '–ë—Ä–æ—à—É—Ä–∏', icon: 'üìñ' },
    { id: 'stickers', name: '–ù–∞–∫–ª–µ–π–∫–∏', icon: 'üè∑Ô∏è' },
    { id: 'posters', name: '–ü–æ—Å—Ç–µ—Ä–∏', icon: 'üìÑ' },
    { id: 'apparel', name: '–û–¥—è–≥', icon: 'üëï' },
    { id: 'packaging', name: '–£–ø–∞–∫–æ–≤–∫–∞', icon: 'üì¶' },
    { id: 'flyers', name: '–õ–∏—Å—Ç—ñ–≤–∫–∏', icon: 'üìã' },
  ];

  const materials = [
    { id: 'canvas', name: '–•–æ–ª—Å—Ç', icon: 'üñºÔ∏è', description: '–•—É–¥–æ–∂–Ω—ñ–π —Ö–æ–ª—Å—Ç' },
    { id: 'acrylic', name: '–ê–∫—Ä–∏–ª', icon: 'üíé', description: '–ê–∫—Ä–∏–ª–æ–≤–µ —Å–∫–ª–æ' },
    { id: 'paper', name: '–ü–∞–ø—ñ—Ä', icon: 'üìÑ', description: '–ó–≤–∏—á–∞–π–Ω–∏–π –ø–∞–ø—ñ—Ä' },
    { id: 'photo-paper', name: '–§–æ—Ç–æ–ø–∞–ø—ñ—Ä', icon: 'üì∏', description: '–ì–ª—è–Ω—Ü–µ–≤–∏–π —Ñ–æ—Ç–æ–ø–∞–ø—ñ—Ä' },
    { id: 'vinyl', name: '–í—ñ–Ω–∏–ª–æ–≤–∏–π', icon: 'üè∑Ô∏è', description: '–í–æ–¥–æ—Å—Ç—ñ–π–∫–∏–π –≤—ñ–Ω—ñ–ª' },
    { id: 'cotton', name: '–ë–∞–≤–æ–≤–Ω–∞', icon: 'üëï', description: '100% –±–∞–≤–æ–≤–Ω–∞' },
    { id: 'cardboard', name: '–ö–∞—Ä—Ç–æ–Ω', icon: 'üì¶', description: '–©—ñ–ª—å–Ω–∏–π –∫–∞—Ä—Ç–æ–Ω' },
  ];

  const sizes = [
    { id: 'A0', name: 'A0', description: '84√ó119 —Å–º' },
    { id: 'A1', name: 'A1', description: '59√ó84 —Å–º' },
    { id: 'A2', name: 'A2', description: '42√ó59 —Å–º' },
    { id: 'A3', name: 'A3', description: '30√ó42 —Å–º' },
    { id: 'A4', name: 'A4', description: '21√ó30 —Å–º' },
    { id: 'A5', name: 'A5', description: '15√ó21 —Å–º' },
    { id: '30x40', name: '30√ó40 —Å–º', description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π' },
    { id: '40x60', name: '40√ó60 —Å–º', description: '–ü–æ–ø—É–ª—è—Ä–Ω–∏–π' },
    { id: '50x70', name: '50√ó70 —Å–º', description: '–í–µ–ª–∏–∫–∏–π' },
    { id: '60x90', name: '60√ó90 —Å–º', description: 'XL —Ä–æ–∑–º—ñ—Ä' },
    { id: '90x50', name: '90√ó50 –º–º', description: '–í—ñ–∑–∏—Ç–∫–∞' },
    { id: 'S-3XL', name: 'S-3XL', description: '–†–æ–∑–º—ñ—Ä–∏ –æ–¥—è–≥—É' },
    { id: 'custom', name: '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π', description: '–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä' },
  ];

  const finishes = [
    { id: 'none', name: '–ë–µ–∑ –æ–±—Ä–æ–±–∫–∏', icon: 'üìÑ', description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —è–∫—ñ—Å—Ç—å' },
    { id: 'lamination', name: '–õ–∞–º—ñ–Ω–∞—Ü—ñ—è', icon: '‚ú®', description: '–ú–∞—Ç–æ–≤–∞ –∞–±–æ –≥–ª—è–Ω—Ü–µ–≤–∞' },
    { id: 'foil', name: '–§–æ–ª—å–≥—É–≤–∞–Ω–Ω—è', icon: 'üåü', description: '–ó–æ–ª–æ—Ç–∞/—Å—Ä—ñ–±–Ω–∞ —Ñ–æ–ª—å–≥–∞' },
    { id: 'gloss', name: '–ì–ª—è–Ω–µ—Ü—å', icon: 'üíé', description: '–ì–ª—è–Ω—Ü–µ–≤–µ –ø–æ–∫—Ä–∏—Ç—Ç—è' },
    { id: 'gallery-wrap', name: '–ì–∞–ª–µ—Ä–µ–π–Ω–∞ –∫—Ä–æ–º–∫–∞', icon: 'üñºÔ∏è', description: '–ù–∞—Ç—è–≥—É–≤–∞–Ω–Ω—è –Ω–∞ –ø—ñ–¥—Ä–∞–º–Ω–∏–∫' },
    { id: 'face-mount', name: 'Face-mount', icon: 'üî≥', description: '–ú–æ–Ω—Ç–∞–∂ –Ω–∞ –∞–∫—Ä–∏–ª' },
    { id: 'dtf', name: 'DTF –¥—Ä—É–∫', icon: 'üëï', description: 'Direct-to-Film' },
    { id: 'glue', name: '–ö–ª–µ—î–≤–∞ –æ–±—Ä–æ–±–∫–∞', icon: 'üìö', description: '–ö–ª–µ–π–æ–≤–µ —Å–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è' },
  ];

  const urgencyOptions = [
    { id: 'standard', name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç', icon: 'üìÖ', description: '3-5 –¥–Ω—ñ–≤', color: 'text-green-600' },
    { id: 'fast', name: '–®–≤–∏–¥–∫–æ', icon: '‚ö°', description: '1-2 –¥–Ω—ñ', color: 'text-orange-600' },
    { id: 'express', name: '–ï–∫—Å–ø—Ä–µ—Å', icon: 'üöÄ', description: '–î–æ 24 –≥–æ–¥–∏–Ω', color: 'text-red-600' },
  ];

  const printTypes = [
    { id: 'digital', name: '–¶–∏—Ñ—Ä–æ–≤–∏–π', icon: 'üñ®Ô∏è', description: '–®–≤–∏–¥–∫–∏–π —Ü–∏—Ñ—Ä–æ–≤–∏–π –¥—Ä—É–∫' },
    { id: 'offset', name: '–û—Ñ—Å–µ—Ç–Ω–∏–π', icon: 'üéØ', description: '–í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π –æ—Ñ—Å–µ—Ç–Ω–∏–π –¥—Ä—É–∫' },
    { id: 'wide-format', name: '–®–∏—Ä–æ–∫–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∏–π', icon: 'üìê', description: '–í–µ–ª–∏–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–∫—É' },
    { id: 'dtf', name: 'DTF', icon: 'üëï', description: 'Direct-to-Film –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—é' },
  ];

  const handlePriceChange = (value: number[]) => {
    onFilterChange({
      priceMin: value[0],
      priceMax: value[1]
    });
  };

  const clearFilters = () => {
    onFilterChange({
      category: undefined,
      priceMin: undefined,
      priceMax: undefined,
      search: undefined,
      material: undefined,
      size: undefined,
      finish: undefined,
      urgency: undefined,
      printType: undefined,
      inStock: undefined,
      rating: undefined
    });
  };

  const activeFiltersCount = [
    filters.category,
    filters.priceMin,
    filters.priceMax,
    filters.search,
    filters.material,
    filters.size,
    filters.finish,
    filters.urgency,
    filters.printType,
    filters.inStock,
    filters.rating
  ].filter(Boolean).length;

  return (
    <div className="space-y-6">
      {/* Modern Header with Glass Effect */}
      <div className="bg-gradient-to-br from-white/80 to-white/60 backdrop-blur-xl rounded-2xl border border-white/50 shadow-xl p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-primary to-primary/80 flex items-center justify-center shadow-lg">
              <Filter className="w-5 h-5 text-white" />
            </div>
            <div>
              <h2 className="font-bold text-lg">–§—ñ–ª—å—Ç—Ä–∏</h2>
              <p className="text-xs text-muted-foreground">–ó–Ω–∞–π–¥—ñ—Ç—å —ñ–¥–µ–∞–ª—å–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç</p>
            </div>
          </div>
          {activeFiltersCount > 0 && (
            <Badge className="bg-gradient-to-r from-primary to-primary/80 text-white shadow-lg">
              {activeFiltersCount}
            </Badge>
          )}
        </div>

        {/* Quick Clear Button */}
        {activeFiltersCount > 0 && (
          <Button
            variant="outline"
            size="sm"
            onClick={clearFilters}
            className="w-full border-dashed hover:bg-red-50 hover:border-red-200 hover:text-red-600 transition-all duration-200"
          >
            <X className="w-4 h-4 mr-2" />
            –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ ({activeFiltersCount})
          </Button>
        )}
      </div>

      {/* Smart Search */}
      <div className="bg-gradient-to-br from-blue-50/80 to-indigo-50/60 backdrop-blur-xl rounded-2xl border border-blue-100/50 shadow-lg p-5">
        <div className="flex items-center gap-2 mb-3">
          <Search className="w-5 h-5 text-blue-600" />
          <span className="font-semibold text-blue-900">–®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫</span>
        </div>
        <div className="relative">
          <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
          <Input
            placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É..."
            value={filters.search || ""}
            onChange={(e) => onFilterChange({ search: e.target.value || undefined })}
            className="pl-12 h-12 rounded-xl border-0 bg-white/80 backdrop-blur-sm shadow-sm focus:shadow-lg transition-all duration-200"
          />
        </div>
      </div>

      {/* Category Pills */}
      <div className="bg-gradient-to-br from-purple-50/80 to-pink-50/60 backdrop-blur-xl rounded-2xl border border-purple-100/50 shadow-lg p-5">
        <div className="flex items-center gap-2 mb-4">
          <div className="w-6 h-6 rounded-lg bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center">
            <span className="text-white text-xs">üìÅ</span>
          </div>
          <span className="font-semibold text-purple-900">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</span>
        </div>
        
        <div className="space-y-3">
          <Button
            variant={!filters.category ? "default" : "ghost"}
            size="sm"
            onClick={() => onFilterChange({ category: undefined })}
            className={`w-full justify-start h-11 rounded-xl transition-all duration-200 ${
              !filters.category 
                ? 'bg-gradient-to-r from-primary to-primary/80 text-white shadow-lg' 
                : 'hover:bg-white/80 backdrop-blur-sm'
            }`}
          >
            <span className="mr-3 text-lg">üåü</span>
            –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
          </Button>
          
          {categories.map((category) => (
            <Button
              key={category.id}
              variant={filters.category === category.id ? "default" : "ghost"}
              size="sm"
              onClick={() => onFilterChange({ 
                category: filters.category === category.id ? undefined : category.id 
              })}
              className={`w-full justify-start h-11 rounded-xl transition-all duration-200 ${
                filters.category === category.id
                  ? 'bg-gradient-to-r from-primary to-primary/80 text-white shadow-lg' 
                  : 'hover:bg-white/80 backdrop-blur-sm'
              }`}
            >
              <span className="mr-3 text-lg">{category.icon}</span>
              {category.name}
            </Button>
          ))}
        </div>
      </div>

      {/* Price Range with Modern Slider */}
      <div className="bg-gradient-to-br from-green-50/80 to-emerald-50/60 backdrop-blur-xl rounded-2xl border border-green-100/50 shadow-lg p-5">
        <div className="flex items-center gap-2 mb-4">
          <div className="w-6 h-6 rounded-lg bg-gradient-to-br from-green-500 to-emerald-500 flex items-center justify-center">
            <span className="text-white text-xs">üí∞</span>
          </div>
          <span className="font-semibold text-green-900">–¶—ñ–Ω–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω</span>
        </div>
        
        <div className="space-y-5">
          <div className="px-3">
            <Slider
              value={[filters.priceMin || 0, filters.priceMax || 1000]}
              min={0}
              max={1000}
              step={50}
              onValueChange={handlePriceChange}
              className="w-full"
            />
          </div>
          
          <div className="flex items-center gap-3">
            <div className="flex-1 space-y-2">
              <Label htmlFor="price-min" className="text-xs font-medium text-green-800">–í—ñ–¥</Label>
              <Input
                id="price-min"
                type="number"
                value={filters.priceMin || ""}
                onChange={(e) => onFilterChange({ 
                  priceMin: e.target.value ? parseInt(e.target.value) : undefined 
                })}
                placeholder="0"
                className="h-10 rounded-lg border-0 bg-white/80 backdrop-blur-sm"
              />
            </div>
            <div className="flex-1 space-y-2">
              <Label htmlFor="price-max" className="text-xs font-medium text-green-800">–î–æ</Label>
              <Input
                id="price-max"
                type="number"
                value={filters.priceMax || ""}
                onChange={(e) => onFilterChange({ 
                  priceMax: e.target.value ? parseInt(e.target.value) : undefined 
                })}
                placeholder="1000"
                className="h-10 rounded-lg border-0 bg-white/80 backdrop-blur-sm"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Materials Filter */}
      <div className="bg-gradient-to-br from-blue-50/80 to-cyan-50/60 backdrop-blur-xl rounded-2xl border border-blue-100/50 shadow-lg p-5">
        <div className="flex items-center gap-2 mb-4">
          <div className="w-6 h-6 rounded-lg bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center">
            <span className="text-white text-xs">üß±</span>
          </div>
          <span className="font-semibold text-blue-900">–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏</span>
        </div>
        
        <div className="space-y-2">
          <Button
            variant={!filters.material ? "default" : "ghost"}
            size="sm"
            onClick={() => onFilterChange({ material: undefined })}
            className={`w-full justify-start h-10 rounded-xl transition-all duration-200 ${
              !filters.material 
                ? 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg' 
                : 'hover:bg-white/80 backdrop-blur-sm'
            }`}
          >
            <span className="mr-3 text-lg">üåà</span>
            –í—Å—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
          </Button>
          
          {materials.map((material) => (
            <Button
              key={material.id}
              variant={filters.material === material.id ? "default" : "ghost"}
              size="sm"
              onClick={() => onFilterChange({ 
                material: filters.material === material.id ? undefined : material.id 
              })}
              className={`w-full justify-start h-10 rounded-xl transition-all duration-200 ${
                filters.material === material.id
                  ? 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg' 
                  : 'hover:bg-white/80 backdrop-blur-sm'
              }`}
            >
              <span className="mr-3 text-lg">{material.icon}</span>
              <div className="flex flex-col items-start">
                <span className="font-medium text-sm">{material.name}</span>
                <span className="text-xs opacity-80">{material.description}</span>
              </div>
            </Button>
          ))}
        </div>
      </div>

      {/* Sizes Filter */}
      <div className="bg-gradient-to-br from-indigo-50/80 to-purple-50/60 backdrop-blur-xl rounded-2xl border border-indigo-100/50 shadow-lg p-5">
        <div className="flex items-center gap-2 mb-4">
          <div className="w-6 h-6 rounded-lg bg-gradient-to-br from-indigo-500 to-purple-500 flex items-center justify-center">
            <span className="text-white text-xs">üìè</span>
          </div>
          <span className="font-semibold text-indigo-900">–†–æ–∑–º—ñ—Ä–∏</span>
        </div>
        
        <div className="grid grid-cols-2 gap-2">
          {sizes.map((size) => (
            <Button
              key={size.id}
              variant={filters.size === size.id ? "default" : "outline"}
              size="sm"
              onClick={() => onFilterChange({ 
                size: filters.size === size.id ? undefined : size.id 
              })}
              className={`h-12 rounded-xl transition-all duration-200 ${
                filters.size === size.id
                  ? 'bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg border-0' 
                  : 'border-indigo-200 hover:bg-indigo-50 hover:border-indigo-300'
              }`}
            >
              <div className="flex flex-col items-center">
                <span className="font-medium text-xs">{size.name}</span>
                <span className="text-xs opacity-80">{size.description}</span>
              </div>
            </Button>
          ))}
        </div>
      </div>

      {/* Finish Types Filter */}
      <div className="bg-gradient-to-br from-rose-50/80 to-pink-50/60 backdrop-blur-xl rounded-2xl border border-rose-100/50 shadow-lg p-5">
        <div className="flex items-center gap-2 mb-4">
          <div className="w-6 h-6 rounded-lg bg-gradient-to-br from-rose-500 to-pink-500 flex items-center justify-center">
            <span className="text-white text-xs">‚ú®</span>
          </div>
          <span className="font-semibold text-rose-900">–û–±—Ä–æ–±–∫–∞</span>
        </div>
        
        <div className="space-y-2">
          {finishes.map((finish) => (
            <Button
              key={finish.id}
              variant={filters.finish === finish.id ? "default" : "ghost"}
              size="sm"
              onClick={() => onFilterChange({ 
                finish: filters.finish === finish.id ? undefined : finish.id 
              })}
              className={`w-full justify-start h-10 rounded-xl transition-all duration-200 ${
                filters.finish === finish.id
                  ? 'bg-gradient-to-r from-rose-500 to-pink-500 text-white shadow-lg' 
                  : 'hover:bg-white/80 backdrop-blur-sm'
              }`}
            >
              <span className="mr-3 text-lg">{finish.icon}</span>
              <div className="flex flex-col items-start">
                <span className="font-medium text-sm">{finish.name}</span>
                <span className="text-xs opacity-80">{finish.description}</span>
              </div>
            </Button>
          ))}
        </div>
      </div>

      {/* Urgency Filter */}
      <div className="bg-gradient-to-br from-red-50/80 to-orange-50/60 backdrop-blur-xl rounded-2xl border border-red-100/50 shadow-lg p-5">
        <div className="flex items-center gap-2 mb-4">
          <div className="w-6 h-6 rounded-lg bg-gradient-to-br from-red-500 to-orange-500 flex items-center justify-center">
            <span className="text-white text-xs">‚è∞</span>
          </div>
          <span className="font-semibold text-red-900">–¢–µ—Ä–º—ñ–Ω–∏ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è</span>
        </div>
        
        <div className="space-y-2">
          {urgencyOptions.map((urgency) => (
            <Button
              key={urgency.id}
              variant={filters.urgency === urgency.id ? "default" : "ghost"}
              size="sm"
              onClick={() => onFilterChange({ 
                urgency: filters.urgency === urgency.id ? undefined : urgency.id 
              })}
              className={`w-full justify-start h-10 rounded-xl transition-all duration-200 ${
                filters.urgency === urgency.id
                  ? 'bg-gradient-to-r from-red-500 to-orange-500 text-white shadow-lg' 
                  : 'hover:bg-white/80 backdrop-blur-sm'
              }`}
            >
              <span className="mr-3 text-lg">{urgency.icon}</span>
              <div className="flex flex-col items-start">
                <span className="font-medium text-sm">{urgency.name}</span>
                <span className={`text-xs ${urgency.color}`}>{urgency.description}</span>
              </div>
            </Button>
          ))}
        </div>
      </div>

      {/* Print Types Filter */}
      <div className="bg-gradient-to-br from-slate-50/80 to-gray-50/60 backdrop-blur-xl rounded-2xl border border-slate-100/50 shadow-lg p-5">
        <div className="flex items-center gap-2 mb-4">
          <div className="w-6 h-6 rounded-lg bg-gradient-to-br from-slate-500 to-gray-500 flex items-center justify-center">
            <span className="text-white text-xs">üñ®Ô∏è</span>
          </div>
          <span className="font-semibold text-slate-900">–¢–∏–ø –¥—Ä—É–∫—É</span>
        </div>
        
        <div className="space-y-2">
          {printTypes.map((printType) => (
            <Button
              key={printType.id}
              variant={filters.printType === printType.id ? "default" : "ghost"}
              size="sm"
              onClick={() => onFilterChange({ 
                printType: filters.printType === printType.id ? undefined : printType.id 
              })}
              className={`w-full justify-start h-10 rounded-xl transition-all duration-200 ${
                filters.printType === printType.id
                  ? 'bg-gradient-to-r from-slate-500 to-gray-500 text-white shadow-lg' 
                  : 'hover:bg-white/80 backdrop-blur-sm'
              }`}
            >
              <span className="mr-3 text-lg">{printType.icon}</span>
              <div className="flex flex-col items-start">
                <span className="font-medium text-sm">{printType.name}</span>
                <span className="text-xs opacity-80">{printType.description}</span>
              </div>
            </Button>
          ))}
        </div>
      </div>

      {/* Rating and Stock Filter */}
      <div className="bg-gradient-to-br from-yellow-50/80 to-amber-50/60 backdrop-blur-xl rounded-2xl border border-yellow-100/50 shadow-lg p-5">
        <div className="flex items-center gap-2 mb-4">
          <div className="w-6 h-6 rounded-lg bg-gradient-to-br from-yellow-500 to-amber-500 flex items-center justify-center">
            <span className="text-white text-xs">‚≠ê</span>
          </div>
          <span className="font-semibold text-yellow-900">–Ø–∫—ñ—Å—Ç—å —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å</span>
        </div>
        
        <div className="space-y-3">
          {/* Rating Filter */}
          <div>
            <Label htmlFor="rating-filter" className="text-xs font-medium text-yellow-800 mb-2 block">
              –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            </Label>
            <Slider
              value={[filters.rating || 0]}
              min={0}
              max={5}
              step={0.1}
              onValueChange={(value) => onFilterChange({ rating: value[0] > 0 ? value[0] : undefined })}
              className="w-full"
            />
            <div className="flex justify-between text-xs text-yellow-600 mt-1">
              <span>0‚≠ê</span>
              <span className="font-medium">{filters.rating ? `${filters.rating.toFixed(1)}‚≠ê+` : '–ë—É–¥—å-—è–∫–∏–π'}</span>
              <span>5‚≠ê</span>
            </div>
          </div>

          {/* In Stock Filter */}
          <Button
            variant={filters.inStock ? "default" : "outline"}
            size="sm"
            onClick={() => onFilterChange({ inStock: filters.inStock ? undefined : true })}
            className={`w-full justify-start h-10 rounded-xl transition-all duration-200 ${
              filters.inStock
                ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg border-0' 
                : 'border-yellow-200 hover:bg-yellow-50 hover:border-yellow-300'
            }`}
          >
            <CheckCircle className="mr-3 w-4 h-4" />
            –¢—ñ–ª—å–∫–∏ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
          </Button>
        </div>
      </div>

      {/* Quick Filter Pills */}
      <div className="bg-gradient-to-br from-orange-50/80 to-yellow-50/60 backdrop-blur-xl rounded-2xl border border-orange-100/50 shadow-lg p-5">
        <div className="flex items-center gap-2 mb-4">
          <div className="w-6 h-6 rounded-lg bg-gradient-to-br from-orange-500 to-yellow-500 flex items-center justify-center">
            <span className="text-white text-xs">‚ö°</span>
          </div>
          <span className="font-semibold text-orange-900">–®–≤–∏–¥–∫—ñ —Ñ—ñ–ª—å—Ç—Ä–∏</span>
        </div>
        
        <div className="flex flex-wrap gap-3">
          <Button
            variant="outline"
            size="sm"
            onClick={() => onFilterChange({ priceMin: 0, priceMax: 200 })}
            className="rounded-full border-orange-200 hover:bg-orange-100 hover:border-orange-300 transition-all duration-200"
          >
            üí∏ –î–æ 200‚Ç¥
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => onFilterChange({ urgency: 'express' })}
            className="rounded-full border-orange-200 hover:bg-orange-100 hover:border-orange-300 transition-all duration-200"
          >
            üöÄ –ï–∫—Å–ø—Ä–µ—Å
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => onFilterChange({ inStock: true })}
            className="rounded-full border-orange-200 hover:bg-orange-100 hover:border-orange-300 transition-all duration-200"
          >
            ‚úÖ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => onFilterChange({ rating: 4.5 })}
            className="rounded-full border-orange-200 hover:bg-orange-100 hover:border-orange-300 transition-all duration-200"
          >
            ‚≠ê –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥
          </Button>
        </div>
      </div>
    </div>
  );
}
