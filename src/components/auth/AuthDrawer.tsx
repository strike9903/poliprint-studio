"use client";

import { useState } from 'react';
import { Sheet, SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { User, Mail, Lock, Eye, EyeOff, Phone, UserPlus, LogIn, Zap, AlertCircle } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { useAuthStore } from '@/store/auth';
import { Alert, AlertDescription } from '@/components/ui/alert';

interface AuthDrawerProps {
  isOpen: boolean;
  onClose: () => void;
  children?: React.ReactNode;
}

export function AuthDrawer({ isOpen, onClose, children }: AuthDrawerProps) {
  const [activeTab, setActiveTab] = useState<'login' | 'register'>('login');
  const [showPassword, setShowPassword] = useState(false);
  const { login, register, isLoading, error, clearError } = useAuthStore();
  
  // Form state with validation
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    firstName: '',
    lastName: '',
    phone: '',
    confirmPassword: ''
  });

  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  // Form validation
  const validateForm = (): boolean => {
    const errors: Record<string, string> = {};
    
    // Email validation
    if (!formData.email) {
      errors.email = "Email –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email";
    }
    
    // Password validation
    if (!formData.password) {
      errors.password = "–ü–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    } else if (formData.password.length < 6) {
      errors.password = "–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤";
    }
    
    // Registration-specific validation
    if (activeTab === 'register') {
      if (!formData.firstName) {
        errors.firstName = "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
      }
      
      if (formData.password !== formData.confirmPassword) {
        errors.confirmPassword = "–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å";
      }
      
      if (formData.phone && !/^\+380\d{9}$/.test(formData.phone.replace(/\s/g, ''))) {
        errors.phone = "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É";
      }
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    clearError();
    
    if (!validateForm()) return;

    try {
      if (activeTab === 'login') {
        await login({
          email: formData.email,
          password: formData.password
        });
      } else {
        await register({
          email: formData.email,
          password: formData.password,
          firstName: formData.firstName,
          lastName: formData.lastName,
          phone: formData.phone
        });
      }
      
      toast({
        title: activeTab === 'register' ? "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! üéâ" : "–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! üéâ",
        description: `–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ${activeTab === 'register' && formData.firstName ? `, ${formData.firstName}` : ''}!`,
      });
      
      // Clear form and close
      setFormData({
        email: '',
        password: '',
        firstName: '',
        lastName: '',
        phone: '',
        confirmPassword: ''
      });
      setFormErrors({});
      onClose();
      
    } catch (error) {
      // Error is already handled by the store
      console.error('Auth error:', error);
    }
  };

  const handleSocialLogin = (provider: 'google' | 'facebook') => {
    toast({
      title: `–í—Ö—ñ–¥ —á–µ—Ä–µ–∑ ${provider === 'google' ? 'Google' : 'Facebook'}`,
      description: "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º",
    });
  };

  return (
    <>
      {children}
      <Sheet open={isOpen} onOpenChange={(open) => !open && onClose()}>
        <SheetContent className="w-[400px] sm:w-[450px]">
          <SheetHeader>
            <SheetTitle className="text-xl font-heading flex items-center gap-2">
              <div className="w-7 h-7 bg-gradient-to-br from-primary to-primary/80 rounded-lg flex items-center justify-center">
                <User className="w-3.5 h-3.5 text-primary-foreground" />
              </div>
              –®–≤–∏–¥–∫–∏–π –≤—Ö—ñ–¥
            </SheetTitle>
          </SheetHeader>

          <div className="space-y-4">
            {/* Error Alert */}
            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'login' | 'register')}>
              <TabsList className="grid w-full grid-cols-2 h-9">
                <TabsTrigger value="login" className="flex items-center gap-1.5 text-sm">
                  <LogIn className="w-3.5 h-3.5" />
                  –í—Ö—ñ–¥
                </TabsTrigger>
                <TabsTrigger value="register" className="flex items-center gap-1.5 text-sm">
                  <UserPlus className="w-3.5 h-3.5" />
                  –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
                </TabsTrigger>
              </TabsList>

              {/* Login Tab */}
              <TabsContent value="login" className="space-y-4">
                <form onSubmit={handleSubmit} className="space-y-3">
                  <div className="space-y-1">
                    <Label htmlFor="login-email" className="text-xs">Email</Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-2.5 h-3.5 w-3.5 text-muted-foreground" />
                      <Input
                        id="login-email"
                        type="email"
                        placeholder="your@email.com"
                        className={`pl-9 h-9 text-sm ${formErrors.email ? 'border-destructive' : ''}`}
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        required
                      />
                    </div>
                    {formErrors.email && (
                      <p className="text-xs text-destructive">{formErrors.email}</p>
                    )}
                  </div>

                  <div className="space-y-1">
                    <Label htmlFor="login-password" className="text-xs">–ü–∞—Ä–æ–ª—å</Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-2.5 h-3.5 w-3.5 text-muted-foreground" />
                      <Input
                        id="login-password"
                        type={showPassword ? 'text' : 'password'}
                        placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                        className={`pl-9 pr-9 h-9 text-sm ${formErrors.password ? 'border-destructive' : ''}`}
                        value={formData.password}
                        onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                        required
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute right-1 top-1 h-7 w-7"
                        onClick={() => setShowPassword(!showPassword)}
                      >
                        {showPassword ? <EyeOff className="h-3 w-3" /> : <Eye className="h-3 w-3" />}
                      </Button>
                    </div>
                    {formErrors.password && (
                      <p className="text-xs text-destructive">{formErrors.password}</p>
                    )}
                  </div>

                  <Button type="submit" className="w-full h-10" disabled={isLoading}>
                    {isLoading ? (
                      <div className="flex items-center gap-2">
                        <div className="h-3 w-3 animate-spin rounded-full border-2 border-background border-t-foreground" />
                        <span className="text-sm">–í—Ö—ñ–¥...</span>
                      </div>
                    ) : (
                      <span className="text-sm font-medium">–£–≤—ñ–π—Ç–∏</span>
                    )}
                  </Button>
                </form>

                {/* Social Login */}
                <div className="relative">
                  <Separator />
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="bg-background px-2 text-xs text-muted-foreground">–∞–±–æ</span>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-2">
                  <Button variant="outline" size="sm" onClick={() => handleSocialLogin('google')} className="h-9">
                    <span className="text-sm">Google</span>
                  </Button>
                  <Button variant="outline" size="sm" onClick={() => handleSocialLogin('facebook')} className="h-9">
                    <span className="text-sm">Facebook</span>
                  </Button>
                </div>
              </TabsContent>

              {/* Register Tab */}
              <TabsContent value="register" className="space-y-4">
                <form onSubmit={handleSubmit} className="space-y-3">
                  <div className="grid grid-cols-2 gap-2">
                    <div className="space-y-1">
                      <Label htmlFor="register-firstName" className="text-xs">–Ü–º'—è</Label>
                      <div className="relative">
                        <User className="absolute left-3 top-2.5 h-3.5 w-3.5 text-muted-foreground" />
                        <Input
                          id="register-firstName"
                          placeholder="–Ü–≤–∞–Ω"
                          className={`pl-9 h-9 text-sm ${formErrors.firstName ? 'border-destructive' : ''}`}
                          value={formData.firstName}
                          onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                          required
                        />
                      </div>
                      {formErrors.firstName && (
                        <p className="text-xs text-destructive">{formErrors.firstName}</p>
                      )}
                    </div>
                    
                    <div className="space-y-1">
                      <Label htmlFor="register-lastName" className="text-xs">–ü—Ä—ñ–∑–≤–∏—â–µ</Label>
                      <Input
                        id="register-lastName"
                        placeholder="–ü–µ—Ç—Ä–µ–Ω–∫–æ"
                        className="h-9 text-sm"
                        value={formData.lastName}
                        onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                      />
                    </div>
                  </div>

                  <div className="space-y-1">
                    <Label htmlFor="register-email" className="text-xs">Email</Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-2.5 h-3.5 w-3.5 text-muted-foreground" />
                      <Input
                        id="register-email"
                        type="email"
                        placeholder="your@email.com"
                        className={`pl-9 h-9 text-sm ${formErrors.email ? 'border-destructive' : ''}`}
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        required
                      />
                    </div>
                    {formErrors.email && (
                      <p className="text-xs text-destructive">{formErrors.email}</p>
                    )}
                  </div>

                  <div className="space-y-1">
                    <Label htmlFor="register-phone" className="text-xs">–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)</Label>
                    <div className="relative">
                      <Phone className="absolute left-3 top-2.5 h-3.5 w-3.5 text-muted-foreground" />
                      <Input
                        id="register-phone"
                        type="tel"
                        placeholder="+380 XX XXX XX XX"
                        className={`pl-9 h-9 text-sm ${formErrors.phone ? 'border-destructive' : ''}`}
                        value={formData.phone}
                        onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                      />
                    </div>
                    {formErrors.phone && (
                      <p className="text-xs text-destructive">{formErrors.phone}</p>
                    )}
                  </div>

                  <div className="space-y-1">
                    <Label htmlFor="register-password" className="text-xs">–ü–∞—Ä–æ–ª—å</Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-2.5 h-3.5 w-3.5 text-muted-foreground" />
                      <Input
                        id="register-password"
                        type={showPassword ? 'text' : 'password'}
                        placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                        className={`pl-9 pr-9 h-9 text-sm ${formErrors.password ? 'border-destructive' : ''}`}
                        value={formData.password}
                        onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                        required
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute right-1 top-1 h-7 w-7"
                        onClick={() => setShowPassword(!showPassword)}
                      >
                        {showPassword ? <EyeOff className="h-3 w-3" /> : <Eye className="h-3 w-3" />}
                      </Button>
                    </div>
                    {formErrors.password && (
                      <p className="text-xs text-destructive">{formErrors.password}</p>
                    )}
                  </div>

                  <div className="space-y-1">
                    <Label htmlFor="confirm-password" className="text-xs">–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å</Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-2.5 h-3.5 w-3.5 text-muted-foreground" />
                      <Input
                        id="confirm-password"
                        type={showPassword ? 'text' : 'password'}
                        placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                        className={`pl-9 h-9 text-sm ${formErrors.confirmPassword ? 'border-destructive' : ''}`}
                        value={formData.confirmPassword}
                        onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                        required
                      />
                    </div>
                    {formErrors.confirmPassword && (
                      <p className="text-xs text-destructive">{formErrors.confirmPassword}</p>
                    )}
                  </div>

                  <Button type="submit" className="w-full h-10" disabled={isLoading}>
                    {isLoading ? (
                      <div className="flex items-center gap-2">
                        <div className="h-3 w-3 animate-spin rounded-full border-2 border-background border-t-foreground" />
                        <span className="text-sm">–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è...</span>
                      </div>
                    ) : (
                      <span className="text-sm font-medium">–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç</span>
                    )}
                  </Button>
                </form>
              </TabsContent>
            </Tabs>

            {/* Compact Benefits */}
            <div className="p-3 bg-muted/30 rounded-lg">
              <div className="flex items-center gap-2 text-xs text-primary mb-2">
                <Zap className="w-3 h-3" />
                <span className="font-medium">–ü–µ—Ä–µ–≤–∞–≥–∏ –∞–∫–∞—É–Ω—Ç—É</span>
              </div>
              <div className="grid grid-cols-3 gap-2 text-xs text-muted-foreground">
                <span>üìÅ –ü—Ä–æ–µ–∫—Ç–∏</span>
                <span>üí∞ –ó–Ω–∏–∂–∫–∏</span>
                <span>üìã –Ü—Å—Ç–æ—Ä—ñ—è</span>
              </div>
            </div>
          </div>
        </SheetContent>
      </Sheet>
    </>
  );
}