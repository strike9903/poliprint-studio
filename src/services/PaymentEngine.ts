"use client";

import { type PaymentMethod, type Order } from '@/contexts/OrderContext';

// üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface UserPaymentPsychology {
  // –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  riskTolerance: 'low' | 'medium' | 'high';
  pricesensitivity: 'low' | 'medium' | 'high';
  conveniencePreference: 'speed' | 'security' | 'cost' | 'familiarity';
  
  // –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  ageGroup?: '18-25' | '26-35' | '36-45' | '46-55' | '55+';
  deviceType: 'mobile' | 'tablet' | 'desktop';
  
  // –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
  preferredMethods: PaymentMethod[];
  failedAttempts: Array<{
    method: PaymentMethod;
    reason: string;
    timestamp: Date;
  }>;
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
  orderValue: number;
  isFirstTime: boolean;
  hasApplePay: boolean;
  hasGooglePay: boolean;
  
  // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏ –≤—Ä–µ–º—è
  city?: string;
  timeOfDay: 'morning' | 'afternoon' | 'evening' | 'night';
  dayOfWeek: 'weekday' | 'weekend';
}

// üí≥ –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π
export interface PaymentMethodDetails {
  id: PaymentMethod;
  name: string;
  description: string;
  icon: string;
  
  // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏
  feePercentage: number;
  feeFixed: number;
  minimumAmount: number;
  maximumAmount: number;
  
  // UX —Ñ–∞–∫—Ç–æ—Ä—ã  
  trustScore: number;        // 0-100, –¥–æ–≤–µ—Ä–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  convenienceScore: number;  // 0-100, —É–¥–æ–±—Å—Ç–≤–æ
  speedScore: number;        // 0-100, —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
  
  // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
  psychologyTriggers: Array<{
    trigger: 'security' | 'speed' | 'familiarity' | 'status' | 'savings';
    strength: number; // 0-100
    message: string;
  }>;
  
  // –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
  isAvailable: boolean;
  unavailableReason?: string;
  estimatedDowntime?: Date;
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç
  averageCompletionTime: number; // —Å–µ–∫—É–Ω–¥—ã
  successRate: number;           // 0-100
  userSatisfactionScore: number; // 0-5
  
  // –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
  promotion?: {
    type: 'cashback' | 'discount' | 'no_fee' | 'bonus_points';
    value: number;
    description: string;
    validUntil: Date;
  };
  
  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  requirements?: string[];
  supportedCurrencies: string[];
  regions: string[];
}

// üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
export interface PaymentRecommendation {
  method: PaymentMethod;
  confidence: number;        // 0-100, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  reasoning: string[];       // –ü—Ä–∏—á–∏–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  
  // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
  psychologicalMatch: number; // 0-100, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞  
  advantages: string[];
  disadvantages?: string[];
  
  // –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ
  totalCost: number;
  savings?: number;
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç
  estimatedTime: number;     // —Å–µ–∫—É–Ω–¥—ã –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  userFrictionScore: number; // 0-100, —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  // A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  variant?: 'control' | 'experiment_1' | 'experiment_2';
}

// üßÆ –ö–ª–∞—Å—Å PaymentEngine
export class PaymentEngine {
  private paymentMethods: PaymentMethodDetails[];
  private analytics: {
    totalTransactions: number;
    successRate: Record<PaymentMethod, number>;
    averageAmount: number;
    peakHours: number[];
    popularMethods: PaymentMethod[];
  };

  constructor() {
    this.paymentMethods = this.initializePaymentMethods();
    this.analytics = this.loadAnalytics();
  }

  // üéØ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  public getPaymentRecommendations(
    userPsychology: UserPaymentPsychology,
    order: Partial<Order>
  ): PaymentRecommendation[] {
    
    // 1. –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    const availableMethods = this.filterAvailableMethods(userPsychology, order);
    
    // 2. –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥
    const recommendations = availableMethods.map(method => 
      this.evaluatePaymentMethod(method, userPsychology, order)
    );
    
    // 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ confidence score
    recommendations.sort((a, b) => b.confidence - a.confidence);
    
    // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º A/B —Ç–µ—Å—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
    return this.applyPersonalization(recommendations, userPsychology);
  }

  // üé® –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  public analyzeUserPsychology(context: {
    userAgent: string;
    orderHistory: any[];
    currentOrder: Partial<Order>;
    timestamp: Date;
  }): UserPaymentPsychology {
    
    const deviceType = this.detectDeviceType(context.userAgent);
    const timeOfDay = this.getTimeOfDay(context.timestamp);
    const dayOfWeek = this.getDayOfWeek(context.timestamp);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫–∞–∑–∞
    const riskTolerance = this.analyzeRiskTolerance(context.orderHistory, context.currentOrder);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω–æ–≤—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const pricesensitivity = this.analyzePriceSensitivity(context.orderHistory);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É–¥–æ–±—Å—Ç–≤–∞
    const conveniencePreference = this.analyzeConveniencePreference(
      deviceType, 
      context.orderHistory
    );
    
    return {
      riskTolerance,
      pricesensitivity,
      conveniencePreference,
      deviceType,
      orderValue: context.currentOrder.pricing?.total || 0,
      isFirstTime: context.orderHistory.length === 0,
      hasApplePay: deviceType === 'mobile' && context.userAgent.includes('iPhone'),
      hasGooglePay: deviceType === 'mobile' && context.userAgent.includes('Android'),
      timeOfDay,
      dayOfWeek,
      preferredMethods: this.extractPreferredMethods(context.orderHistory),
      failedAttempts: [],
    };
  }

  // üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  public calculateTotalCost(
    method: PaymentMethod, 
    orderAmount: number
  ): {
    originalAmount: number;
    fee: number;
    total: number;
    savings?: number;
    promotion?: {
      type: string;
      discount: number;
      description: string;
    };
  } {
    
    const methodDetails = this.getMethodDetails(method);
    if (!methodDetails) {
      throw new Error(`Payment method ${method} not found`);
    }
    
    // –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è
    const percentageFee = (orderAmount * methodDetails.feePercentage) / 100;
    const totalFee = percentageFee + methodDetails.feeFixed;
    
    let finalFee = totalFee;
    let promotion;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–∫—Ü–∏–∏
    if (methodDetails.promotion) {
      switch (methodDetails.promotion.type) {
        case 'no_fee':
          finalFee = 0;
          promotion = {
            type: '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞',
            discount: totalFee,
            description: methodDetails.promotion.description,
          };
          break;
          
        case 'discount':
          const discount = (orderAmount * methodDetails.promotion.value) / 100;
          promotion = {
            type: '–ó–Ω–∏–∂–∫–∞',
            discount,
            description: methodDetails.promotion.description,
          };
          break;
      }
    }
    
    return {
      originalAmount: orderAmount,
      fee: finalFee,
      total: orderAmount + finalFee,
      savings: promotion?.discount,
      promotion,
    };
  }

  // üîç –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  private initializePaymentMethods(): PaymentMethodDetails[] {
    return [
      {
        id: 'liqpay-card',
        name: '–ö–∞—Ä—Ç–∫–∞ (LiqPay)',
        description: 'Visa, MasterCard —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫',
        icon: 'üí≥',
        feePercentage: 2.75,
        feeFixed: 0,
        minimumAmount: 1,
        maximumAmount: 100000,
        trustScore: 95,
        convenienceScore: 90,
        speedScore: 85,
        psychologyTriggers: [
          { trigger: 'familiarity', strength: 90, message: '–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ' },
          { trigger: 'security', strength: 85, message: '–ó–∞—Ö–∏—â–µ–Ω–æ –±–∞–Ω–∫–æ–º –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫' },
        ],
        isAvailable: true,
        averageCompletionTime: 45,
        successRate: 94,
        userSatisfactionScore: 4.3,
        supportedCurrencies: ['UAH'],
        regions: ['UA'],
      },
      
      {
        id: 'mono-card',
        name: '–ö–∞—Ä—Ç–∫–∞ (Mono)',
        description: '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Mono Bank',
        icon: 'üñ§',
        feePercentage: 2.5,
        feeFixed: 0,
        minimumAmount: 1,
        maximumAmount: 100000,
        trustScore: 88,
        convenienceScore: 95,
        speedScore: 95,
        psychologyTriggers: [
          { trigger: 'speed', strength: 95, message: '–ù–∞–π—à–≤–∏–¥—à–∞ –æ–ø–ª–∞—Ç–∞ –≤ –£–∫—Ä–∞—ó–Ω—ñ' },
          { trigger: 'status', strength: 70, message: '–°—É—á–∞—Å–Ω–∏–π –±–∞–Ω–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å–∏–≤–Ω–∏—Ö –ª—é–¥–µ–π' },
        ],
        isAvailable: true,
        averageCompletionTime: 20,
        successRate: 96,
        userSatisfactionScore: 4.6,
        promotion: {
          type: 'discount',
          value: 1,
          description: '–ö–µ—à–±–µ–∫ 1% –∑–∞ –æ–ø–ª–∞—Ç—É Mono',
          validUntil: new Date('2024-12-31'),
        },
        supportedCurrencies: ['UAH'],
        regions: ['UA'],
      },
      
      {
        id: 'apple-pay',
        name: 'Apple Pay',
        description: '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Apple Pay',
        icon: 'üçé',
        feePercentage: 2.75,
        feeFixed: 0,
        minimumAmount: 1,
        maximumAmount: 100000,
        trustScore: 98,
        convenienceScore: 100,
        speedScore: 100,
        psychologyTriggers: [
          { trigger: 'security', strength: 98, message: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –±–µ–∑–ø–µ–∫–∞ –∑ Touch ID / Face ID' },
          { trigger: 'speed', strength: 100, message: '–û–ø–ª–∞—Ç–∞ –æ–¥–Ω–∏–º —Ç–æ—Ä–∫–∞–Ω–Ω—è–º' },
          { trigger: 'status', strength: 80, message: '–ü—Ä–µ–º—ñ—É–º –¥–æ—Å–≤—ñ–¥ –æ–ø–ª–∞—Ç–∏' },
        ],
        isAvailable: true,
        averageCompletionTime: 8,
        successRate: 99,
        userSatisfactionScore: 4.9,
        requirements: ['iPhone –∞–±–æ iPad', 'iOS 14+', 'Touch ID –∞–±–æ Face ID'],
        supportedCurrencies: ['UAH'],
        regions: ['UA'],
      },
      
      {
        id: 'google-pay',
        name: 'Google Pay',
        description: '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Google Pay',
        icon: 'üì±',
        feePercentage: 2.75,
        feeFixed: 0,
        minimumAmount: 1,
        maximumAmount: 100000,
        trustScore: 95,
        convenienceScore: 98,
        speedScore: 98,
        psychologyTriggers: [
          { trigger: 'security', strength: 95, message: '–ó–∞—Ö–∏—â–µ–Ω–æ Google' },
          { trigger: 'speed', strength: 98, message: '–ú–∏—Ç—Ç—î–≤–∞ –æ–ø–ª–∞—Ç–∞' },
          { trigger: 'familiarity', strength: 85, message: '–ó–Ω–∞–π–æ–º–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å Android' },
        ],
        isAvailable: true,
        averageCompletionTime: 12,
        successRate: 97,
        userSatisfactionScore: 4.7,
        requirements: ['Android 5.0+', 'NFC', '–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –µ–∫—Ä–∞–Ω—É'],
        supportedCurrencies: ['UAH'],
        regions: ['UA'],
      },
      
      {
        id: 'cash-on-delivery',
        name: '–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂',
        description: '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ',
        icon: 'üíµ',
        feePercentage: 0,
        feeFixed: 20, // –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        minimumAmount: 100,
        maximumAmount: 30000,
        trustScore: 85,
        convenienceScore: 60,
        speedScore: 40,
        psychologyTriggers: [
          { trigger: 'security', strength: 95, message: '–û–ø–ª–∞—á—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–≤–∞—Ä—É' },
          { trigger: 'familiarity', strength: 80, message: '–ó–≤–∏—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤' },
        ],
        isAvailable: true,
        averageCompletionTime: 0, // –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —á–∞—Å—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞—Ä–∞–∑
        successRate: 85, // –ù–∏–∂—á–µ —á–µ—Ä–µ–∑ –≤—ñ–¥–º–æ–≤–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤—Ü—ñ
        userSatisfactionScore: 3.8,
        supportedCurrencies: ['UAH'],
        regions: ['UA'],
      },
    ];
  }

  private filterAvailableMethods(
    userPsychology: UserPaymentPsychology,
    order: Partial<Order>
  ): PaymentMethodDetails[] {
    return this.paymentMethods.filter(method => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      if (!method.isAvailable) return false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å—É–º–º—ã
      const orderAmount = order.pricing?.total || 0;
      if (orderAmount < method.minimumAmount || orderAmount > method.maximumAmount) {
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
      if (method.id === 'apple-pay' && !userPsychology.hasApplePay) return false;
      if (method.id === 'google-pay' && !userPsychology.hasGooglePay) return false;
      
      return true;
    });
  }

  private evaluatePaymentMethod(
    method: PaymentMethodDetails,
    userPsychology: UserPaymentPsychology,
    order: Partial<Order>
  ): PaymentRecommendation {
    
    let confidence = 0;
    const reasoning: string[] = [];
    const advantages: string[] = [];
    const disadvantages: string[] = [];
    
    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    const psychologicalMatch = this.calculatePsychologicalMatch(method, userPsychology);
    confidence += psychologicalMatch * 0.4; // 40% –≤–µ—Å–∞
    
    if (psychologicalMatch > 80) {
      reasoning.push(`–í—ñ–¥–º—ñ–Ω–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é (${psychologicalMatch}% —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å)`);
    }
    
    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–¥–æ–±—Å—Ç–≤–æ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞  
    if (userPsychology.deviceType === 'mobile') {
      if (['apple-pay', 'google-pay'].includes(method.id)) {
        confidence += 25;
        reasoning.push('–û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é');
        advantages.push('–®–≤–∏–¥–∫–∞ –æ–ø–ª–∞—Ç–∞ –æ–¥–Ω–∏–º —Ç–æ—Ä–∫–∞–Ω–Ω—è–º');
      }
    }
    
    // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω–æ–≤—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const costAnalysis = this.calculateTotalCost(method.id, order.pricing?.total || 0);
    if (userPsychology.pricesensitivity === 'high') {
      if (costAnalysis.fee === 0) {
        confidence += 20;
        reasoning.push('–ë–µ–∑ –∫–æ–º—ñ—Å—ñ—ó');
        advantages.push('–ï–∫–æ–Ω–æ–º—ñ—è –Ω–∞ –∫–æ–º—ñ—Å—ñ—ó');
      } else if (costAnalysis.fee < 50) {
        confidence += 10;
        reasoning.push('–ù–∏–∑—å–∫–∞ –∫–æ–º—ñ—Å—ñ—è');
      } else {
        confidence -= 10;
        disadvantages.push(`–ö–æ–º—ñ—Å—ñ—è ${costAnalysis.fee} ‚Ç¥`);
      }
    }
    
    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
    if (userPsychology.conveniencePreference === 'speed') {
      confidence += method.speedScore * 0.3;
      if (method.averageCompletionTime < 30) {
        reasoning.push('–î—É–∂–µ —à–≤–∏–¥–∫–∞ –æ–ø–ª–∞—Ç–∞');
        advantages.push(`–û–ø–ª–∞—Ç–∞ –∑–∞ ${method.averageCompletionTime} —Å–µ–∫—É–Ω–¥`);
      }
    }
    
    // 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å  
    if (userPsychology.riskTolerance === 'low') {
      confidence += method.trustScore * 0.2;
      if (method.successRate > 95) {
        reasoning.push('–í–∏—Å–æ–∫–∞ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å');
        advantages.push(`${method.successRate}% —É—Å–ø—ñ—à–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤`);
      }
    }
    
    // 6. –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º–æ—Ü–∏–∏
    if (method.promotion) {
      confidence += 15;
      reasoning.push(`–ê–∫—Ü—ñ—è: ${method.promotion.description}`);
      advantages.push(method.promotion.description);
    }
    
    // 7. –£—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userPsychology.preferredMethods.includes(method.id)) {
      confidence += 20;
      reasoning.push('–í–∞—à —É–ª—é–±–ª–µ–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏');
    }
    
    // 8. –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    if (userPsychology.isFirstTime && ['liqpay-card', 'cash-on-delivery'].includes(method.id)) {
      confidence += 10;
      reasoning.push('–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º confidence (0-100)
    confidence = Math.min(100, Math.max(0, confidence));
    
    return {
      method: method.id,
      confidence,
      reasoning,
      psychologicalMatch,
      advantages,
      disadvantages: disadvantages.length > 0 ? disadvantages : undefined,
      totalCost: costAnalysis.total,
      savings: costAnalysis.savings,
      estimatedTime: method.averageCompletionTime,
      userFrictionScore: this.calculateUserFriction(method, userPsychology),
    };
  }

  private calculatePsychologicalMatch(
    method: PaymentMethodDetails,
    userPsychology: UserPaymentPsychology
  ): number {
    let match = 0;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –º–µ—Ç–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    method.psychologyTriggers.forEach(trigger => {
      switch (trigger.trigger) {
        case 'speed':
          if (userPsychology.conveniencePreference === 'speed') {
            match += trigger.strength * 0.8;
          }
          break;
          
        case 'security':
          if (userPsychology.riskTolerance === 'low') {
            match += trigger.strength * 0.8;
          }
          break;
          
        case 'familiarity':
          if (userPsychology.conveniencePreference === 'familiarity') {
            match += trigger.strength * 0.8;
          }
          break;
          
        case 'savings':
          if (userPsychology.pricesensitivity === 'high') {
            match += trigger.strength * 0.9;
          }
          break;
          
        case 'status':
          if (userPsychology.ageGroup === '26-35' || userPsychology.ageGroup === '18-25') {
            match += trigger.strength * 0.6;
          }
          break;
      }
    });
    
    return Math.min(100, match / method.psychologyTriggers.length);
  }

  private calculateUserFriction(
    method: PaymentMethodDetails,
    userPsychology: UserPaymentPsychology
  ): number {
    let friction = 0;
    
    // –ë–∞–∑–æ–≤—ã–π —Ñ—Ä–∏–∫—à–µ–Ω –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–∞
    const baseFriction = {
      'apple-pay': 5,
      'google-pay': 5,
      'mono-card': 15,
      'liqpay-card': 20,
      'liqpay-privat24': 18,
      'cash-on-delivery': 10,
      'bank-transfer': 40,
    }[method.id] || 25;
    
    friction += baseFriction;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ñ—Ä–∏–∫—à–µ–Ω –¥–ª—è –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    if (!userPsychology.preferredMethods.includes(method.id)) {
      friction += 10;
    }
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    const failedAttempts = userPsychology.failedAttempts.filter(
      attempt => attempt.method === method.id
    ).length;
    friction += failedAttempts * 15;
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞
    if (method.requirements && method.requirements.length > 0) {
      friction += method.requirements.length * 5;
    }
    
    return Math.min(100, friction);
  }

  private applyPersonalization(
    recommendations: PaymentRecommendation[],
    userPsychology: UserPaymentPsychology
  ): PaymentRecommendation[] {
    
    // A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—è–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø
    const testGroup = Math.random();
    
    if (testGroup < 0.33) {
      // –ì—Ä—É–ø–ø–∞ A: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ confidence
      return recommendations.map(rec => ({ ...rec, variant: 'control' }));
    } else if (testGroup < 0.66) {
      // –ì—Ä—É–ø–ø–∞ B: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç mobile-first –º–µ—Ç–æ–¥–∞–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
      if (userPsychology.deviceType === 'mobile') {
        const mobileFirst = recommendations.sort((a, b) => {
          const aMobile = ['apple-pay', 'google-pay'].includes(a.method) ? 1 : 0;
          const bMobile = ['apple-pay', 'google-pay'].includes(b.method) ? 1 : 0;
          return bMobile - aMobile || b.confidence - a.confidence;
        });
        return mobileFirst.map(rec => ({ ...rec, variant: 'experiment_1' }));
      }
      return recommendations.map(rec => ({ ...rec, variant: 'experiment_1' }));
    } else {
      // –ì—Ä—É–ø–ø–∞ C: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ—Ç–æ–¥–∞–º —Å –ø—Ä–æ–º–æ—Ü–∏—è–º–∏
      const promotionFirst = recommendations.sort((a, b) => {
        const aPromo = a.savings ? 1 : 0;
        const bPromo = b.savings ? 1 : 0;
        return bPromo - aPromo || b.confidence - a.confidence;
      });
      return promotionFirst.map(rec => ({ ...rec, variant: 'experiment_2' }));
    }
  }

  // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private detectDeviceType(userAgent: string): 'mobile' | 'tablet' | 'desktop' {
    if (/Mobile|Android|iPhone/.test(userAgent)) return 'mobile';
    if (/iPad|Tablet/.test(userAgent)) return 'tablet';
    return 'desktop';
  }

  private getTimeOfDay(timestamp: Date): 'morning' | 'afternoon' | 'evening' | 'night' {
    const hour = timestamp.getHours();
    if (hour < 6) return 'night';
    if (hour < 12) return 'morning';
    if (hour < 18) return 'afternoon';
    if (hour < 22) return 'evening';
    return 'night';
  }

  private getDayOfWeek(timestamp: Date): 'weekday' | 'weekend' {
    const day = timestamp.getDay();
    return day === 0 || day === 6 ? 'weekend' : 'weekday';
  }

  private analyzeRiskTolerance(orderHistory: any[], currentOrder: Partial<Order>): 'low' | 'medium' | 'high' {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –±—ã –∏—Å—Ç–æ—Ä–∏—é
    const orderValue = currentOrder.pricing?.total || 0;
    if (orderValue > 5000) return 'low';      // –ë–æ–ª—å—à–∏–µ —Å—É–º–º—ã = –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫-—Ç–æ–ª–µ—Ä–∞–Ω—Å
    if (orderValue > 1000) return 'medium';
    return 'high';
  }

  private analyzePriceSensitivity(orderHistory: any[]): 'low' | 'medium' | 'high' {
    // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—ã–±–æ—Ä–∞ –¥–µ—à–µ–≤—ã—Ö –æ–ø—Ü–∏–π
    return orderHistory.length === 0 ? 'medium' : 'high'; // –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ü–µ–Ω–µ
  }

  private analyzeConveniencePreference(
    deviceType: 'mobile' | 'tablet' | 'desktop',
    orderHistory: any[]
  ): 'speed' | 'security' | 'cost' | 'familiarity' {
    if (deviceType === 'mobile') return 'speed';
    return orderHistory.length === 0 ? 'security' : 'familiarity';
  }

  private extractPreferredMethods(orderHistory: any[]): PaymentMethod[] {
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –±—ã –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤
    return [];
  }

  private getMethodDetails(method: PaymentMethod): PaymentMethodDetails | undefined {
    return this.paymentMethods.find(m => m.id === method);
  }

  private loadAnalytics() {
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –±—ã –∏–∑ API
    return {
      totalTransactions: 10000,
      successRate: {
        'liqpay-card': 94,
        'liqpay-privat24': 95,
        'mono-card': 96,
        'apple-pay': 99,
        'google-pay': 97,
        'cash-on-delivery': 85,
        'bank-transfer': 92,
      } as Record<PaymentMethod, number>,
      averageAmount: 850,
      peakHours: [10, 14, 19, 21],
      popularMethods: ['liqpay-card', 'mono-card', 'apple-pay'] as PaymentMethod[],
    };
  }

  // üí∞ –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –ø–ª–∞—Ç–µ–∂
  public calculatePaymentFee(method: PaymentMethod, amount: number): number {
    const methodDetails = this.paymentMethods.find(m => m.id === method);
    if (!methodDetails) return 0;
    
    const feeFixed = methodDetails.feeFixed || 0;
    const feePercentage = (methodDetails.feePercentage || 0) / 100;
    
    return feeFixed + (amount * feePercentage);
  }
}

// üè≠ Singleton instance
export const paymentEngine = new PaymentEngine();